{"version":3,"sources":["components/card/card.componet.jsx","components/card-list/card-list.component.jsx","components/search-box/searchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","monster","name","company","address","zipcode","alt","src","id","email","CardList","console","log","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","mon","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3a5e9e6e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\nexport const Card = props => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <h1>{props.monster.name}</h1>\r\n      <h1>{props.monster.company.name}</h1>\r\n      <h1>{props.monster.address.zipcode}</h1>\r\n      {/* <img alt=\"heros\" src ={`https://www.superheroapi.com/api.php/1272012016316810/${props.monster.id}/image`}></img>*/}\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set3`}\r\n      ></img>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.componet\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = props => {\r\n  console.log(props);\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  ); //children are anything between <> and </>; looking at App.js\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./searchBox.style.css\";\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {//placeholder = props.placeholder, handleChange = props.handleChange\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange = {handleChange}\r\n      // onChange={e => this.handleChange(e)}\r\n    />\r\n  );\r\n};\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport { CardList } from \"./components/card-list/card-list.component\"; //{} to import a function, import a class does not need {}\n//import { InputField } from \"./components/text-input\";\nimport \"./App.css\";\nimport {SearchBox} from './components/search-box/searchBox.component';\n/*function App () {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React for the first time\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      \n      monsters: [],\n      searchField: \"\"\n    };\n    //this.handleChange = this.handleChange.bind(this)\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(users => {\n        this.setState({ monsters: users });\n        console.log(users);\n      });\n  }\n  /* <button onClick={() => this.setState ({string: 'Changee text'})}>\n          Click me\n        </button>\n        <p>{this.state.string}</p>*/\n  /*handleChange(e) {\n    this.setState({ searchField: e.target.value });\n    console.log(this.state.searchField);\n  }*/\n  handleChange = e =>{ //if using arrow function, you dont need to bind(this) in the constructor because it automatically does that\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n    //name and age ... are the parameters for the function CardList\n    const {monsters, searchField} = this.state; //destructor\n    var filteredMonsters = monsters.filter(mon =>\n      mon.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n      <h1 className='head'>Monsters</h1>\n       \n        <SearchBox placeholder ='search monsters' handleChange = {this.handleChange}\n        />\n\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n    //<button>{Dummy}</button>\n  }\n}\n\nexport default App;\n//nodeJS: module.exports = App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render (<App />, document.getElementById ('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register ();\n"],"sourceRoot":""}